--- tmp/external/gwp_asan/Android.bp	2021-02-04 20:11:44.242609077 +0200
+++ Android.bp	2021-02-04 20:14:16.515784922 +0200
@@ -100,86 +100,86 @@
 
 // GWP-ASan crash handler API. Provides all the tools you need to symbolize a
 // GWP-ASan crash.
-cc_library {
-    name: "gwp_asan_crash_handler",
-    defaults: ["gwp_asan_defaults"],
-    header_libs: [
-        "gwp_asan_headers",
-        "libc_headers", // Required for assert.h
-    ],
-    srcs: [
-        "gwp_asan/common.cpp",
-        "gwp_asan/crash_handler.cpp",
-        "gwp_asan/platform_specific/common_posix.cpp",
-        "gwp_asan/platform_specific/utilities_posix.cpp",
-        "gwp_asan/stack_trace_compressor.cpp",
-    ],
-    apex_available: [
-        "//apex_available:platform",
-        "com.android.runtime",
-    ],
-}
-
-cc_fuzz {
-    name: "stack_trace_compressor_fuzzer",
-    host_supported: true,
-    srcs: ["tools/stack_trace_compressor_fuzzer.cpp"],
-    static_libs: ["gwp_asan"],
-}
-
-// These unit tests are also continuously run upstream in LLVM's buildbots.
-cc_test {
-    name: "gwp_asan_unittest",
-    defaults: ["linux_bionic_supported"],
-    static_libs: [
-        "gwp_asan",
-        "gwp_asan_crash_handler",
-        "libasync_safe",
-        "liblog",
-        "libunwindstack",
-        "liblzma", // Dependency from libunwindstack.
-    ],
-
-    ldflags: [
-        // Ensure that ICF doesn't clobber DeallocateMemory2 into
-        // DeallocateMemory in tests/backtrace.cpp. This is done in the linker,
-        // so `optnone` in the function declaration doesn't help.
-        "-Wl,--icf=none",
-    ],
-    srcs: [
-        "android/test_backtrace.cpp",
-        "android/test_printf.cpp",
-        "gwp_asan/optional/segv_handler_posix.cpp",
-        "gwp_asan/tests/alignment.cpp",
-        "gwp_asan/tests/backtrace.cpp",
-        "gwp_asan/tests/basic.cpp",
-        "gwp_asan/tests/compression.cpp",
-        "gwp_asan/tests/crash_handler_api.cpp",
-        "gwp_asan/tests/enable_disable.cpp",
-        "gwp_asan/tests/harness.cpp",
-        "gwp_asan/tests/iterate.cpp",
-        "gwp_asan/tests/late_init.cpp",
-        "gwp_asan/tests/mutex_test.cpp",
-        "gwp_asan/tests/slot_reuse.cpp",
-        "gwp_asan/tests/thread_contention.cpp",
-    ],
-    include_dirs: ["bionic/libc/async_safe/include"],
-    test_suites: ["general-tests"],
-    cflags: [
-        // GWP-ASan requires anything that uses GuardedPoolAllocator headers to
-        // use platform (ELF) TLS.
-        "-fno-emulated-tls",
-
-        // Ensure that the helper functions in test/backtrace.cpp don't get
-        // tail-call optimised, as this breaks the unwind chain.
-        "-fno-optimize-sibling-calls",
-
-        // The experimental pass manager seems to kill __attribute__((optnone)),
-        // and so we disable it (as we rely on optnone for tests/backtrace.cpp).
-        "-fno-experimental-new-pass-manager",
-    ],
-
-    // Late initialisation tests should run isolated, as the platform IE TLS
-    // PRNG should be initialised to its default state.
-    isolated: true,
-}
+// cc_library {
+//     name: "gwp_asan_crash_handler",
+//     defaults: ["gwp_asan_defaults"],
+//     header_libs: [
+//         "gwp_asan_headers",
+//         "libc_headers", // Required for assert.h
+//     ],
+//     srcs: [
+//         "gwp_asan/common.cpp",
+//         "gwp_asan/crash_handler.cpp",
+//         "gwp_asan/platform_specific/common_posix.cpp",
+//         "gwp_asan/platform_specific/utilities_posix.cpp",
+//         "gwp_asan/stack_trace_compressor.cpp",
+//     ],
+//     apex_available: [
+//         "//apex_available:platform",
+//         "com.android.runtime",
+//     ],
+// }
+// 
+// cc_fuzz {
+//     name: "stack_trace_compressor_fuzzer",
+//     host_supported: true,
+//     srcs: ["tools/stack_trace_compressor_fuzzer.cpp"],
+//     static_libs: ["gwp_asan"],
+// }
+// 
+// // These unit tests are also continuously run upstream in LLVM's buildbots.
+// cc_test {
+//     name: "gwp_asan_unittest",
+//     defaults: ["linux_bionic_supported"],
+//     static_libs: [
+//         "gwp_asan",
+//         "gwp_asan_crash_handler",
+//         "libasync_safe",
+//         "liblog",
+//         "libunwindstack",
+//         "liblzma", // Dependency from libunwindstack.
+//     ],
+// 
+//     ldflags: [
+//         // Ensure that ICF doesn't clobber DeallocateMemory2 into
+//         // DeallocateMemory in tests/backtrace.cpp. This is done in the linker,
+//         // so `optnone` in the function declaration doesn't help.
+//         "-Wl,--icf=none",
+//     ],
+//     srcs: [
+//         "android/test_backtrace.cpp",
+//         "android/test_printf.cpp",
+//         "gwp_asan/optional/segv_handler_posix.cpp",
+//         "gwp_asan/tests/alignment.cpp",
+//         "gwp_asan/tests/backtrace.cpp",
+//         "gwp_asan/tests/basic.cpp",
+//         "gwp_asan/tests/compression.cpp",
+//         "gwp_asan/tests/crash_handler_api.cpp",
+//         "gwp_asan/tests/enable_disable.cpp",
+//         "gwp_asan/tests/harness.cpp",
+//         "gwp_asan/tests/iterate.cpp",
+//         "gwp_asan/tests/late_init.cpp",
+//         "gwp_asan/tests/mutex_test.cpp",
+//         "gwp_asan/tests/slot_reuse.cpp",
+//         "gwp_asan/tests/thread_contention.cpp",
+//     ],
+//     include_dirs: ["bionic/libc/async_safe/include"],
+//     test_suites: ["general-tests"],
+//     cflags: [
+//         // GWP-ASan requires anything that uses GuardedPoolAllocator headers to
+//         // use platform (ELF) TLS.
+//         "-fno-emulated-tls",
+// 
+//         // Ensure that the helper functions in test/backtrace.cpp don't get
+//         // tail-call optimised, as this breaks the unwind chain.
+//         "-fno-optimize-sibling-calls",
+// 
+//         // The experimental pass manager seems to kill __attribute__((optnone)),
+//         // and so we disable it (as we rely on optnone for tests/backtrace.cpp).
+//         "-fno-experimental-new-pass-manager",
+//     ],
+// 
+//     // Late initialisation tests should run isolated, as the platform IE TLS
+//     // PRNG should be initialised to its default state.
+//     isolated: true,
+// }
