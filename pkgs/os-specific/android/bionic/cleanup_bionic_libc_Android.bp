--- tmp/bionic/libc/Android.bp	2021-02-04 19:28:30.457093919 +0200
+++ Android.bp	2021-02-04 20:43:08.606653776 +0200
@@ -116,7 +116,7 @@
         "libc_jemalloc_wrapper",
     ],
     header_libs: ["gwp_asan_headers"],
-    product_variables: libc_scudo_product_variables,
+//    product_variables: libc_scudo_product_variables,
 }
 
 // Functions not implemented by jemalloc directly, or that need to
@@ -989,201 +989,201 @@
 // be safely used in libc_ndk.a (no troublesome global data
 // or constructors).
 // ========================================================
-cc_library_static {
-    defaults: ["libc_defaults"],
-    srcs: [
-        "bionic/NetdClientDispatch.cpp",
-        "bionic/__bionic_get_shell_path.cpp",
-        "bionic/__cmsg_nxthdr.cpp",
-        "bionic/__errno.cpp",
-        "bionic/__gnu_basename.cpp",
-        "bionic/__libc_current_sigrtmax.cpp",
-        "bionic/__libc_current_sigrtmin.cpp",
-        "bionic/abort.cpp",
-        "bionic/accept.cpp",
-        "bionic/access.cpp",
-        "bionic/arpa_inet.cpp",
-        "bionic/assert.cpp",
-        "bionic/atof.cpp",
-        "bionic/bionic_allocator.cpp",
-        "bionic/bionic_arc4random.cpp",
-        "bionic/bionic_futex.cpp",
-        "bionic/bionic_netlink.cpp",
-        "bionic/bionic_systrace.cpp",
-        "bionic/bionic_time_conversions.cpp",
-        "bionic/brk.cpp",
-        "bionic/c16rtomb.cpp",
-        "bionic/c32rtomb.cpp",
-        "bionic/chmod.cpp",
-        "bionic/chown.cpp",
-        "bionic/clearenv.cpp",
-        "bionic/clock.cpp",
-        "bionic/clock_getcpuclockid.cpp",
-        "bionic/clock_nanosleep.cpp",
-        "bionic/clone.cpp",
-        "bionic/ctype.cpp",
-        "bionic/dirent.cpp",
-        "bionic/dup.cpp",
-        "bionic/environ.cpp",
-        "bionic/error.cpp",
-        "bionic/eventfd.cpp",
-        "bionic/exec.cpp",
-        "bionic/faccessat.cpp",
-        "bionic/fchmod.cpp",
-        "bionic/fchmodat.cpp",
-        "bionic/fcntl.cpp",
-        "bionic/fdsan.cpp",
-        "bionic/fdtrack.cpp",
-        "bionic/ffs.cpp",
-        "bionic/fgetxattr.cpp",
-        "bionic/flistxattr.cpp",
-        "bionic/flockfile.cpp",
-        "bionic/fpclassify.cpp",
-        "bionic/fsetxattr.cpp",
-        "bionic/ftruncate.cpp",
-        "bionic/ftw.cpp",
-        "bionic/futimens.cpp",
-        "bionic/getcwd.cpp",
-        "bionic/getdomainname.cpp",
-        "bionic/getentropy.cpp",
-        "bionic/gethostname.cpp",
-        "bionic/getloadavg.cpp",
-        "bionic/getpagesize.cpp",
-        "bionic/getpgrp.cpp",
-        "bionic/getpid.cpp",
-        "bionic/getpriority.cpp",
-        "bionic/gettid.cpp",
-        "bionic/get_device_api_level.cpp",
-        "bionic/grp_pwd.cpp",
-        "bionic/grp_pwd_file.cpp",
-        "bionic/iconv.cpp",
-        "bionic/icu_wrappers.cpp",
-        "bionic/ifaddrs.cpp",
-        "bionic/inotify_init.cpp",
-        "bionic/ioctl.cpp",
-        "bionic/killpg.cpp",
-        "bionic/langinfo.cpp",
-        "bionic/lchown.cpp",
-        "bionic/lfs64_support.cpp",
-        "bionic/libc_init_common.cpp",
-        "bionic/libgen.cpp",
-        "bionic/link.cpp",
-        "bionic/locale.cpp",
-        "bionic/lockf.cpp",
-        "bionic/lstat.cpp",
-        "bionic/mblen.cpp",
-        "bionic/mbrtoc16.cpp",
-        "bionic/mbrtoc32.cpp",
-        "bionic/memmem.cpp",
-        "bionic/mempcpy.cpp",
-        "bionic/mkdir.cpp",
-        "bionic/mkfifo.cpp",
-        "bionic/mknod.cpp",
-        "bionic/mntent.cpp",
-        "bionic/mremap.cpp",
-        "bionic/net_if.cpp",
-        "bionic/netdb.cpp",
-        "bionic/netinet_in.cpp",
-        "bionic/nl_types.cpp",
-        "bionic/open.cpp",
-        "bionic/pathconf.cpp",
-        "bionic/pause.cpp",
-        "bionic/pipe.cpp",
-        "bionic/poll.cpp",
-        "bionic/posix_fadvise.cpp",
-        "bionic/posix_fallocate.cpp",
-        "bionic/posix_madvise.cpp",
-        "bionic/posix_timers.cpp",
-        "bionic/ptrace.cpp",
-        "bionic/pty.cpp",
-        "bionic/raise.cpp",
-        "bionic/rand.cpp",
-        "bionic/readlink.cpp",
-        "bionic/realpath.cpp",
-        "bionic/reboot.cpp",
-        "bionic/recv.cpp",
-        "bionic/recvmsg.cpp",
-        "bionic/rename.cpp",
-        "bionic/rmdir.cpp",
-        "bionic/scandir.cpp",
-        "bionic/sched_getaffinity.cpp",
-        "bionic/sched_getcpu.cpp",
-        "bionic/semaphore.cpp",
-        "bionic/send.cpp",
-        "bionic/setegid.cpp",
-        "bionic/seteuid.cpp",
-        "bionic/setpgrp.cpp",
-        "bionic/sigaction.cpp",
-        "bionic/signal.cpp",
-        "bionic/sigprocmask.cpp",
-        "bionic/sleep.cpp",
-        "bionic/socketpair.cpp",
-        "bionic/spawn.cpp",
-        "bionic/stat.cpp",
-        "bionic/stdlib_l.cpp",
-        "bionic/strchrnul.cpp",
-        "bionic/strerror.cpp",
-        "bionic/string_l.cpp",
-        "bionic/strings_l.cpp",
-        "bionic/strsignal.cpp",
-        "bionic/strtol.cpp",
-        "bionic/strtold.cpp",
-        "bionic/swab.cpp",
-        "bionic/symlink.cpp",
-        "bionic/sync_file_range.cpp",
-        "bionic/sys_epoll.cpp",
-        "bionic/sys_msg.cpp",
-        "bionic/sys_sem.cpp",
-        "bionic/sys_shm.cpp",
-        "bionic/sys_signalfd.cpp",
-        "bionic/sys_statfs.cpp",
-        "bionic/sys_statvfs.cpp",
-        "bionic/sys_time.cpp",
-        "bionic/sysinfo.cpp",
-        "bionic/syslog.cpp",
-        "bionic/system.cpp",
-        "bionic/system_property_api.cpp",
-        "bionic/system_property_set.cpp",
-        "bionic/tdestroy.cpp",
-        "bionic/termios.cpp",
-        "bionic/thread_private.cpp",
-        "bionic/threads.cpp",
-        "bionic/timespec_get.cpp",
-        "bionic/tmpfile.cpp",
-        "bionic/umount.cpp",
-        "bionic/unlink.cpp",
-        "bionic/usleep.cpp",
-        "bionic/wait.cpp",
-        "bionic/wchar.cpp",
-        "bionic/wchar_l.cpp",
-        "bionic/wcstod.cpp",
-        "bionic/wctype.cpp",
-        "bionic/wcwidth.cpp",
-        "bionic/wmempcpy.cpp",
-
-        // This contains a weak stub implementation of __find_icu_symbol for wctype.cpp,
-        // which will be overridden by the actual one in libc.so.
-        "bionic/icu_static.cpp",
-    ],
-
-    multilib: {
-        lib32: {
-            // LP32 cruft
-            srcs: ["bionic/mmap.cpp"],
-        },
-    },
-    product_variables: {
-        treble_linker_namespaces: {
-            cflags: ["-DTREBLE_LINKER_NAMESPACES"],
-        },
-    },
-    whole_static_libs: ["libsystemproperties"],
-    cppflags: ["-Wold-style-cast"],
-    local_include_dirs: ["stdio"],
-    include_dirs: ["bionic/libstdc++/include"],
-    name: "libc_bionic_ndk",
-    generated_headers: ["generated_android_ids"],
-}
+// cc_library_static {
+//     defaults: ["libc_defaults"],
+//     srcs: [
+//         "bionic/NetdClientDispatch.cpp",
+//         "bionic/__bionic_get_shell_path.cpp",
+//         "bionic/__cmsg_nxthdr.cpp",
+//         "bionic/__errno.cpp",
+//         "bionic/__gnu_basename.cpp",
+//         "bionic/__libc_current_sigrtmax.cpp",
+//         "bionic/__libc_current_sigrtmin.cpp",
+//         "bionic/abort.cpp",
+//         "bionic/accept.cpp",
+//         "bionic/access.cpp",
+//         "bionic/arpa_inet.cpp",
+//         "bionic/assert.cpp",
+//         "bionic/atof.cpp",
+//         "bionic/bionic_allocator.cpp",
+//         "bionic/bionic_arc4random.cpp",
+//         "bionic/bionic_futex.cpp",
+//         "bionic/bionic_netlink.cpp",
+//         "bionic/bionic_systrace.cpp",
+//         "bionic/bionic_time_conversions.cpp",
+//         "bionic/brk.cpp",
+//         "bionic/c16rtomb.cpp",
+//         "bionic/c32rtomb.cpp",
+//         "bionic/chmod.cpp",
+//         "bionic/chown.cpp",
+//         "bionic/clearenv.cpp",
+//         "bionic/clock.cpp",
+//         "bionic/clock_getcpuclockid.cpp",
+//         "bionic/clock_nanosleep.cpp",
+//         "bionic/clone.cpp",
+//         "bionic/ctype.cpp",
+//         "bionic/dirent.cpp",
+//         "bionic/dup.cpp",
+//         "bionic/environ.cpp",
+//         "bionic/error.cpp",
+//         "bionic/eventfd.cpp",
+//         "bionic/exec.cpp",
+//         "bionic/faccessat.cpp",
+//         "bionic/fchmod.cpp",
+//         "bionic/fchmodat.cpp",
+//         "bionic/fcntl.cpp",
+//         "bionic/fdsan.cpp",
+//         "bionic/fdtrack.cpp",
+//         "bionic/ffs.cpp",
+//         "bionic/fgetxattr.cpp",
+//         "bionic/flistxattr.cpp",
+//         "bionic/flockfile.cpp",
+//         "bionic/fpclassify.cpp",
+//         "bionic/fsetxattr.cpp",
+//         "bionic/ftruncate.cpp",
+//         "bionic/ftw.cpp",
+//         "bionic/futimens.cpp",
+//         "bionic/getcwd.cpp",
+//         "bionic/getdomainname.cpp",
+//         "bionic/getentropy.cpp",
+//         "bionic/gethostname.cpp",
+//         "bionic/getloadavg.cpp",
+//         "bionic/getpagesize.cpp",
+//         "bionic/getpgrp.cpp",
+//         "bionic/getpid.cpp",
+//         "bionic/getpriority.cpp",
+//         "bionic/gettid.cpp",
+//         "bionic/get_device_api_level.cpp",
+//         "bionic/grp_pwd.cpp",
+//         "bionic/grp_pwd_file.cpp",
+//         "bionic/iconv.cpp",
+//         "bionic/icu_wrappers.cpp",
+//         "bionic/ifaddrs.cpp",
+//         "bionic/inotify_init.cpp",
+//         "bionic/ioctl.cpp",
+//         "bionic/killpg.cpp",
+//         "bionic/langinfo.cpp",
+//         "bionic/lchown.cpp",
+//         "bionic/lfs64_support.cpp",
+//         "bionic/libc_init_common.cpp",
+//         "bionic/libgen.cpp",
+//         "bionic/link.cpp",
+//         "bionic/locale.cpp",
+//         "bionic/lockf.cpp",
+//         "bionic/lstat.cpp",
+//         "bionic/mblen.cpp",
+//         "bionic/mbrtoc16.cpp",
+//         "bionic/mbrtoc32.cpp",
+//         "bionic/memmem.cpp",
+//         "bionic/mempcpy.cpp",
+//         "bionic/mkdir.cpp",
+//         "bionic/mkfifo.cpp",
+//         "bionic/mknod.cpp",
+//         "bionic/mntent.cpp",
+//         "bionic/mremap.cpp",
+//         "bionic/net_if.cpp",
+//         "bionic/netdb.cpp",
+//         "bionic/netinet_in.cpp",
+//         "bionic/nl_types.cpp",
+//         "bionic/open.cpp",
+//         "bionic/pathconf.cpp",
+//         "bionic/pause.cpp",
+//         "bionic/pipe.cpp",
+//         "bionic/poll.cpp",
+//         "bionic/posix_fadvise.cpp",
+//         "bionic/posix_fallocate.cpp",
+//         "bionic/posix_madvise.cpp",
+//         "bionic/posix_timers.cpp",
+//         "bionic/ptrace.cpp",
+//         "bionic/pty.cpp",
+//         "bionic/raise.cpp",
+//         "bionic/rand.cpp",
+//         "bionic/readlink.cpp",
+//         "bionic/realpath.cpp",
+//         "bionic/reboot.cpp",
+//         "bionic/recv.cpp",
+//         "bionic/recvmsg.cpp",
+//         "bionic/rename.cpp",
+//         "bionic/rmdir.cpp",
+//         "bionic/scandir.cpp",
+//         "bionic/sched_getaffinity.cpp",
+//         "bionic/sched_getcpu.cpp",
+//         "bionic/semaphore.cpp",
+//         "bionic/send.cpp",
+//         "bionic/setegid.cpp",
+//         "bionic/seteuid.cpp",
+//         "bionic/setpgrp.cpp",
+//         "bionic/sigaction.cpp",
+//         "bionic/signal.cpp",
+//         "bionic/sigprocmask.cpp",
+//         "bionic/sleep.cpp",
+//         "bionic/socketpair.cpp",
+//         "bionic/spawn.cpp",
+//         "bionic/stat.cpp",
+//         "bionic/stdlib_l.cpp",
+//         "bionic/strchrnul.cpp",
+//         "bionic/strerror.cpp",
+//         "bionic/string_l.cpp",
+//         "bionic/strings_l.cpp",
+//         "bionic/strsignal.cpp",
+//         "bionic/strtol.cpp",
+//         "bionic/strtold.cpp",
+//         "bionic/swab.cpp",
+//         "bionic/symlink.cpp",
+//         "bionic/sync_file_range.cpp",
+//         "bionic/sys_epoll.cpp",
+//         "bionic/sys_msg.cpp",
+//         "bionic/sys_sem.cpp",
+//         "bionic/sys_shm.cpp",
+//         "bionic/sys_signalfd.cpp",
+//         "bionic/sys_statfs.cpp",
+//         "bionic/sys_statvfs.cpp",
+//         "bionic/sys_time.cpp",
+//         "bionic/sysinfo.cpp",
+//         "bionic/syslog.cpp",
+//         "bionic/system.cpp",
+//         "bionic/system_property_api.cpp",
+//         "bionic/system_property_set.cpp",
+//         "bionic/tdestroy.cpp",
+//         "bionic/termios.cpp",
+//         "bionic/thread_private.cpp",
+//         "bionic/threads.cpp",
+//         "bionic/timespec_get.cpp",
+//         "bionic/tmpfile.cpp",
+//         "bionic/umount.cpp",
+//         "bionic/unlink.cpp",
+//         "bionic/usleep.cpp",
+//         "bionic/wait.cpp",
+//         "bionic/wchar.cpp",
+//         "bionic/wchar_l.cpp",
+//         "bionic/wcstod.cpp",
+//         "bionic/wctype.cpp",
+//         "bionic/wcwidth.cpp",
+//         "bionic/wmempcpy.cpp",
+// 
+//         // This contains a weak stub implementation of __find_icu_symbol for wctype.cpp,
+//         // which will be overridden by the actual one in libc.so.
+//         "bionic/icu_static.cpp",
+//     ],
+// 
+//     multilib: {
+//         lib32: {
+//             // LP32 cruft
+//             srcs: ["bionic/mmap.cpp"],
+//         },
+//     },
+//     product_variables: {
+//         treble_linker_namespaces: {
+//             cflags: ["-DTREBLE_LINKER_NAMESPACES"],
+//         },
+//     },
+//     whole_static_libs: ["libsystemproperties"],
+//     cppflags: ["-Wold-style-cast"],
+//     local_include_dirs: ["stdio"],
+//     include_dirs: ["bionic/libstdc++/include"],
+//     name: "libc_bionic_ndk",
+//     generated_headers: ["generated_android_ids"],
+// }
 
 // ========================================================
 // libc_pthread.a - pthreads parts that previously lived in
@@ -2194,244 +2194,244 @@
 // Generate a syscall name / number mapping. These objects are text files
 // (thanks to the -dD -E flags) and not binary files. They will then be
 // consumed by the genseccomp.py script and converted into C++ code.
-cc_defaults {
-    name: "libseccomp_gen_syscall_nrs_defaults",
-    recovery_available: true,
-    srcs: ["seccomp/gen_syscall_nrs.cpp"],
-    cflags: [
-        "-dD",
-        "-E",
-        "-Wall",
-        "-Werror",
-        "-nostdinc",
-    ],
-}
-
-cc_object {
-    name: "libseccomp_gen_syscall_nrs_arm",
-    defaults: ["libseccomp_gen_syscall_nrs_defaults"],
-    local_include_dirs: [
-        "kernel/uapi/asm-arm",
-        "kernel/uapi",
-    ],
-}
-
-cc_object {
-    name: "libseccomp_gen_syscall_nrs_arm64",
-    defaults: ["libseccomp_gen_syscall_nrs_defaults"],
-    local_include_dirs: [
-        "kernel/uapi/asm-arm64",
-        "kernel/uapi",
-    ],
-}
-
-cc_object {
-    name: "libseccomp_gen_syscall_nrs_x86",
-    defaults: ["libseccomp_gen_syscall_nrs_defaults"],
-    srcs: ["seccomp/gen_syscall_nrs_x86.cpp"],
-    exclude_srcs: ["seccomp/gen_syscall_nrs.cpp"],
-    local_include_dirs: [
-        "kernel/uapi/asm-x86",
-        "kernel/uapi",
-    ],
-}
-
-cc_object {
-    name: "libseccomp_gen_syscall_nrs_x86_64",
-    defaults: ["libseccomp_gen_syscall_nrs_defaults"],
-    srcs: ["seccomp/gen_syscall_nrs_x86_64.cpp"],
-    exclude_srcs: ["seccomp/gen_syscall_nrs.cpp"],
-    local_include_dirs: [
-        "kernel/uapi/asm-x86",
-        "kernel/uapi",
-    ],
-}
-
-// Generate the C++ policy sources for app and system seccomp-bpf filters.
-python_binary_host {
-    name: "genseccomp",
-    main: "tools/genseccomp.py",
-
-    srcs: [
-        "tools/genseccomp.py",
-        "tools/gensyscalls.py",
-    ],
-
-    data: [
-        "kernel/uapi/**/*.h",
-    ],
-
-    version: {
-        py2: {
-            enabled: true,
-        },
-        py3: {
-            enabled: false,
-        },
-    },
-}
-
-python_binary_host {
-    name: "genfunctosyscallnrs",
-    main: "tools/genfunctosyscallnrs.py",
-
-    srcs: [
-        "tools/genseccomp.py",
-        "tools/genfunctosyscallnrs.py",
-        "tools/gensyscalls.py",
-    ],
-
-    data: [
-        "kernel/uapi/**/*.h",
-    ],
-
-    version: {
-        py2: {
-            enabled: true,
-        },
-        py3: {
-            enabled: false,
-        },
-    },
-}
-
-cc_genrule {
-    name: "func_to_syscall_nrs",
-    recovery_available: true,
-    cmd: "$(location genfunctosyscallnrs) --out-dir=$(genDir) $(in)",
-
-    tools: [ "genfunctosyscallnrs" ],
-
-    srcs: [
-        "SYSCALLS.TXT",
-        ":libseccomp_gen_syscall_nrs_arm",
-        ":libseccomp_gen_syscall_nrs_arm64",
-        ":libseccomp_gen_syscall_nrs_x86",
-        ":libseccomp_gen_syscall_nrs_x86_64",
-    ],
-
-    out: [
-        "func_to_syscall_nrs.h",
-    ],
-}
-
-// SECCOMP_BLACKLIST_APP_ZYGOTE.TXT = SECCOMP_BLACKLIST_APP.txt - setresgid*
-genrule {
-    name: "generate_app_zygote_blacklist",
-    out: ["SECCOMP_BLACKLIST_APP_ZYGOTE.TXT"],
-    srcs: ["SECCOMP_BLACKLIST_APP.TXT"],
-    cmd: "grep -v '^int[ \t]*setresgid' $(in) > $(out)",
-}
-
-cc_genrule {
-    name: "libseccomp_policy_app_zygote_sources",
-    recovery_available: true,
-    cmd: "$(location genseccomp) --out-dir=$(genDir) --name-modifier=app_zygote $(in)",
-
-    tools: [ "genseccomp" ],
-
-    srcs: [
-        "SYSCALLS.TXT",
-        "SECCOMP_WHITELIST_COMMON.TXT",
-        "SECCOMP_WHITELIST_APP.TXT",
-        "SECCOMP_BLACKLIST_COMMON.TXT",
-        "SECCOMP_PRIORITY.TXT",
-        ":generate_app_zygote_blacklist",
-        ":libseccomp_gen_syscall_nrs_arm",
-        ":libseccomp_gen_syscall_nrs_arm64",
-        ":libseccomp_gen_syscall_nrs_x86",
-        ":libseccomp_gen_syscall_nrs_x86_64",
-    ],
-
-    out: [
-        "arm64_app_zygote_policy.cpp",
-        "arm_app_zygote_policy.cpp",
-        "x86_64_app_zygote_policy.cpp",
-        "x86_app_zygote_policy.cpp",
-    ],
-}
-
-cc_genrule {
-    name: "libseccomp_policy_app_sources",
-    recovery_available: true,
-    cmd: "$(location genseccomp) --out-dir=$(genDir) --name-modifier=app $(in)",
-
-    tools: [ "genseccomp" ],
-
-    srcs: [
-        "SYSCALLS.TXT",
-        "SECCOMP_WHITELIST_COMMON.TXT",
-        "SECCOMP_WHITELIST_APP.TXT",
-        "SECCOMP_BLACKLIST_COMMON.TXT",
-        "SECCOMP_BLACKLIST_APP.TXT",
-        "SECCOMP_PRIORITY.TXT",
-        ":libseccomp_gen_syscall_nrs_arm",
-        ":libseccomp_gen_syscall_nrs_arm64",
-        ":libseccomp_gen_syscall_nrs_x86",
-        ":libseccomp_gen_syscall_nrs_x86_64",
-    ],
-
-    out: [
-        "arm64_app_policy.cpp",
-        "arm_app_policy.cpp",
-        "x86_64_app_policy.cpp",
-        "x86_app_policy.cpp",
-    ],
-}
-
-cc_genrule {
-    name: "libseccomp_policy_system_sources",
-    recovery_available: true,
-    cmd: "$(location genseccomp) --out-dir=$(genDir) --name-modifier=system $(in)",
-
-    tools: [ "genseccomp" ],
-
-    srcs: [
-        "SYSCALLS.TXT",
-        "SECCOMP_WHITELIST_COMMON.TXT",
-        "SECCOMP_WHITELIST_SYSTEM.TXT",
-        "SECCOMP_BLACKLIST_COMMON.TXT",
-        "SECCOMP_PRIORITY.TXT",
-        ":libseccomp_gen_syscall_nrs_arm",
-        ":libseccomp_gen_syscall_nrs_arm64",
-        ":libseccomp_gen_syscall_nrs_x86",
-        ":libseccomp_gen_syscall_nrs_x86_64",
-    ],
-
-    out: [
-        "arm64_system_policy.cpp",
-        "arm_system_policy.cpp",
-        "x86_64_system_policy.cpp",
-        "x86_system_policy.cpp",
-    ],
-}
-
-cc_library {
-    name: "libseccomp_policy",
-    recovery_available: true,
-    generated_headers: ["func_to_syscall_nrs"],
-    generated_sources: [
-        "libseccomp_policy_app_sources",
-        "libseccomp_policy_app_zygote_sources",
-        "libseccomp_policy_system_sources",
-    ],
-
-    srcs: [
-        "seccomp/seccomp_policy.cpp",
-    ],
-
-    export_include_dirs: ["seccomp/include"],
-    cflags: [
-        "-Wall",
-        "-Werror",
-    ],
-    shared: {
-        shared_libs: ["libbase"],
-    },
-    static: {
-        static_libs: ["libbase"],
-    },
-}
+// cc_defaults {
+//     name: "libseccomp_gen_syscall_nrs_defaults",
+//     recovery_available: true,
+//     srcs: ["seccomp/gen_syscall_nrs.cpp"],
+//     cflags: [
+//         "-dD",
+//         "-E",
+//         "-Wall",
+//         "-Werror",
+//         "-nostdinc",
+//     ],
+// }
+// 
+// cc_object {
+//     name: "libseccomp_gen_syscall_nrs_arm",
+//     defaults: ["libseccomp_gen_syscall_nrs_defaults"],
+//     local_include_dirs: [
+//         "kernel/uapi/asm-arm",
+//         "kernel/uapi",
+//     ],
+// }
+// 
+// cc_object {
+//     name: "libseccomp_gen_syscall_nrs_arm64",
+//     defaults: ["libseccomp_gen_syscall_nrs_defaults"],
+//     local_include_dirs: [
+//         "kernel/uapi/asm-arm64",
+//         "kernel/uapi",
+//     ],
+// }
+// 
+// cc_object {
+//     name: "libseccomp_gen_syscall_nrs_x86",
+//     defaults: ["libseccomp_gen_syscall_nrs_defaults"],
+//     srcs: ["seccomp/gen_syscall_nrs_x86.cpp"],
+//     exclude_srcs: ["seccomp/gen_syscall_nrs.cpp"],
+//     local_include_dirs: [
+//         "kernel/uapi/asm-x86",
+//         "kernel/uapi",
+//     ],
+// }
+// 
+// cc_object {
+//     name: "libseccomp_gen_syscall_nrs_x86_64",
+//     defaults: ["libseccomp_gen_syscall_nrs_defaults"],
+//     srcs: ["seccomp/gen_syscall_nrs_x86_64.cpp"],
+//     exclude_srcs: ["seccomp/gen_syscall_nrs.cpp"],
+//     local_include_dirs: [
+//         "kernel/uapi/asm-x86",
+//         "kernel/uapi",
+//     ],
+// }
+// 
+// // Generate the C++ policy sources for app and system seccomp-bpf filters.
+// python_binary_host {
+//     name: "genseccomp",
+//     main: "tools/genseccomp.py",
+// 
+//     srcs: [
+//         "tools/genseccomp.py",
+//         "tools/gensyscalls.py",
+//     ],
+// 
+//     data: [
+//         "kernel/uapi/**/*.h",
+//     ],
+// 
+//     version: {
+//         py2: {
+//             enabled: true,
+//         },
+//         py3: {
+//             enabled: false,
+//         },
+//     },
+// }
+// 
+// python_binary_host {
+//     name: "genfunctosyscallnrs",
+//     main: "tools/genfunctosyscallnrs.py",
+// 
+//     srcs: [
+//         "tools/genseccomp.py",
+//         "tools/genfunctosyscallnrs.py",
+//         "tools/gensyscalls.py",
+//     ],
+// 
+//     data: [
+//         "kernel/uapi/**/*.h",
+//     ],
+// 
+//     version: {
+//         py2: {
+//             enabled: true,
+//         },
+//         py3: {
+//             enabled: false,
+//         },
+//     },
+// }
+// 
+// cc_genrule {
+//     name: "func_to_syscall_nrs",
+//     recovery_available: true,
+//     cmd: "$(location genfunctosyscallnrs) --out-dir=$(genDir) $(in)",
+// 
+//     tools: [ "genfunctosyscallnrs" ],
+// 
+//     srcs: [
+//         "SYSCALLS.TXT",
+//         ":libseccomp_gen_syscall_nrs_arm",
+//         ":libseccomp_gen_syscall_nrs_arm64",
+//         ":libseccomp_gen_syscall_nrs_x86",
+//         ":libseccomp_gen_syscall_nrs_x86_64",
+//     ],
+// 
+//     out: [
+//         "func_to_syscall_nrs.h",
+//     ],
+// }
+// 
+// // SECCOMP_BLACKLIST_APP_ZYGOTE.TXT = SECCOMP_BLACKLIST_APP.txt - setresgid*
+// genrule {
+//     name: "generate_app_zygote_blacklist",
+//     out: ["SECCOMP_BLACKLIST_APP_ZYGOTE.TXT"],
+//     srcs: ["SECCOMP_BLACKLIST_APP.TXT"],
+//     cmd: "grep -v '^int[ \t]*setresgid' $(in) > $(out)",
+// }
+// 
+// cc_genrule {
+//     name: "libseccomp_policy_app_zygote_sources",
+//     recovery_available: true,
+//     cmd: "$(location genseccomp) --out-dir=$(genDir) --name-modifier=app_zygote $(in)",
+// 
+//     tools: [ "genseccomp" ],
+// 
+//     srcs: [
+//         "SYSCALLS.TXT",
+//         "SECCOMP_WHITELIST_COMMON.TXT",
+//         "SECCOMP_WHITELIST_APP.TXT",
+//         "SECCOMP_BLACKLIST_COMMON.TXT",
+//         "SECCOMP_PRIORITY.TXT",
+//         ":generate_app_zygote_blacklist",
+//         ":libseccomp_gen_syscall_nrs_arm",
+//         ":libseccomp_gen_syscall_nrs_arm64",
+//         ":libseccomp_gen_syscall_nrs_x86",
+//         ":libseccomp_gen_syscall_nrs_x86_64",
+//     ],
+// 
+//     out: [
+//         "arm64_app_zygote_policy.cpp",
+//         "arm_app_zygote_policy.cpp",
+//         "x86_64_app_zygote_policy.cpp",
+//         "x86_app_zygote_policy.cpp",
+//     ],
+// }
+// 
+// cc_genrule {
+//     name: "libseccomp_policy_app_sources",
+//     recovery_available: true,
+//     cmd: "$(location genseccomp) --out-dir=$(genDir) --name-modifier=app $(in)",
+// 
+//     tools: [ "genseccomp" ],
+// 
+//     srcs: [
+//         "SYSCALLS.TXT",
+//         "SECCOMP_WHITELIST_COMMON.TXT",
+//         "SECCOMP_WHITELIST_APP.TXT",
+//         "SECCOMP_BLACKLIST_COMMON.TXT",
+//         "SECCOMP_BLACKLIST_APP.TXT",
+//         "SECCOMP_PRIORITY.TXT",
+//         ":libseccomp_gen_syscall_nrs_arm",
+//         ":libseccomp_gen_syscall_nrs_arm64",
+//         ":libseccomp_gen_syscall_nrs_x86",
+//         ":libseccomp_gen_syscall_nrs_x86_64",
+//     ],
+// 
+//     out: [
+//         "arm64_app_policy.cpp",
+//         "arm_app_policy.cpp",
+//         "x86_64_app_policy.cpp",
+//         "x86_app_policy.cpp",
+//     ],
+// }
+// 
+// cc_genrule {
+//     name: "libseccomp_policy_system_sources",
+//     recovery_available: true,
+//     cmd: "$(location genseccomp) --out-dir=$(genDir) --name-modifier=system $(in)",
+// 
+//     tools: [ "genseccomp" ],
+// 
+//     srcs: [
+//         "SYSCALLS.TXT",
+//         "SECCOMP_WHITELIST_COMMON.TXT",
+//         "SECCOMP_WHITELIST_SYSTEM.TXT",
+//         "SECCOMP_BLACKLIST_COMMON.TXT",
+//         "SECCOMP_PRIORITY.TXT",
+//         ":libseccomp_gen_syscall_nrs_arm",
+//         ":libseccomp_gen_syscall_nrs_arm64",
+//         ":libseccomp_gen_syscall_nrs_x86",
+//         ":libseccomp_gen_syscall_nrs_x86_64",
+//     ],
+// 
+//     out: [
+//         "arm64_system_policy.cpp",
+//         "arm_system_policy.cpp",
+//         "x86_64_system_policy.cpp",
+//         "x86_system_policy.cpp",
+//     ],
+// }
+// 
+// cc_library {
+//     name: "libseccomp_policy",
+//     recovery_available: true,
+//     generated_headers: ["func_to_syscall_nrs"],
+//     generated_sources: [
+//         "libseccomp_policy_app_sources",
+//         "libseccomp_policy_app_zygote_sources",
+//         "libseccomp_policy_system_sources",
+//     ],
+// 
+//     srcs: [
+//         "seccomp/seccomp_policy.cpp",
+//     ],
+// 
+//     export_include_dirs: ["seccomp/include"],
+//     cflags: [
+//         "-Wall",
+//         "-Werror",
+//     ],
+//     shared: {
+//         shared_libs: ["libbase"],
+//     },
+//     static: {
+//         static_libs: ["libbase"],
+//     },
+// }
 
 // This is a temporary library that will use scudo as the native memory
 // allocator. To use it, add it as the first shared library.
